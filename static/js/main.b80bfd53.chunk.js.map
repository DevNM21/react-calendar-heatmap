{"version":3,"sources":["Demo.js","App.js","registerServiceWorker.js","index.js"],"names":["shiftDate","date","numDays","newDate","Date","setDate","getDate","generateRandomValues","count","arguments","length","undefined","arr","idx","push","getRange","map","index","min","max","Math","floor","random","Demo","state","values","generateValues","_this","setState","getTooltipDataAttrs","value","data-tip","concat","toISOString","slice","handleClick","alert","react_default","a","createElement","className","react_calendar_heatmap_umd_default","this","classForValue","tooltipDataAttrs","onClick","dist_default","React","Component","App","src_Demo","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b80bfd53.chunk.js","sourcesContent":["import React from 'react';\nimport CalendarHeatmap from 'react-calendar-heatmap';\nimport ReactTooltip from 'react-tooltip';\n\nfunction shiftDate(date, numDays) {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\n\nfunction getRange(count) {\n  const arr = [];\n  for (let idx = 0; idx < count; idx += 1) {\n    arr.push(idx);\n  }\n  return arr;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateRandomValues(count, date = new Date()) {\n  return getRange(count).map((index) => {\n    return {\n      date: shiftDate(date, -index),\n      count: getRandomInt(1, 3),\n    };\n  });\n}\n\nclass Demo extends React.Component {\n  state = {\n    values: generateRandomValues(200),\n  };\n\n  generateValues = () => {\n    this.setState({\n      values: generateRandomValues(200),\n    });\n  };\n\n  getTooltipDataAttrs = (value) => {\n    // Temporary hack around null value.date issue\n    if (!value || !value.date) {\n      return null;\n    }\n    // Configuration for react-tooltip\n    return {\n      'data-tip': `${value.date.toISOString().slice(0, 10)} has count: ${value.count}`,\n    };\n  };\n\n  handleClick = (value) => {\n    alert(`You clicked on ${value.date.toISOString().slice(0, 10)} with count: ${value.count}`);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-6\">\n            <CalendarHeatmap\n              values={this.state.values}\n              classForValue={(value) => {\n                if (!value) {\n                  return 'color-empty';\n                }\n                return `color-github-${value.count}`;\n              }}\n              tooltipDataAttrs={this.getTooltipDataAttrs}\n              onClick={this.handleClick}\n            />\n          </div>\n          <div className=\"col-12 col-sm-6\">\n            <CalendarHeatmap\n              values={this.state.values}\n              classForValue={(value) => {\n                if (!value) {\n                  return 'color-empty';\n                }\n                return `color-gitlab-${value.count}`;\n              }}\n              tooltipDataAttrs={this.getTooltipDataAttrs}\n              onClick={this.handleClick}\n            />\n          </div>\n        </div>{' '}\n        <div className=\"text-sm-center mt-4\">\n          <button className=\"btn btn-link btn-sm text-secondary\" onClick={this.generateValues}>\n            Regenerate values\n          </button>\n        </div>\n        <ReactTooltip />\n      </div>\n    );\n  }\n}\n\nexport default Demo;\n","import React, { Component } from 'react';\nimport 'react-calendar-heatmap/dist/styles.css';\nimport './App.css';\nimport Demo from './Demo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container py-5\">\n        <div className=\"text-sm-center\">\n          <h1>react-calendar-heatmap</h1>\n          <p>\n            A calendar heatmap component built on SVG, inspired by githubâ€™s commit calendar graph.\n          </p>\n        </div>\n\n        <div className=\"mt-5\">\n          <Demo />\n        </div>\n\n        <hr className=\"mt-5\" />\n\n        <div className=\"text-sm-center mt-5\">\n          <h2>Installation</h2>\n          <div className=\"mt-4\">Install with yarn or npm:</div>\n          <div className=\"mt-3\">\n            <code className=\"p-2 text-dark bg-yellow\">yarn add react-calendar-heatmap</code>\n          </div>\n          <div className=\"mt-5\">\n            <a\n              className=\"btn btn-info btn-lg\"\n              href=\"https://github.com/kevinsqi/react-calendar-heatmap\"\n            >\n              View docs on Github\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}